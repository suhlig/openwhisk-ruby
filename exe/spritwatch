#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift(File.expand_path('../lib', __dir__))

require 'thor'
require 'sprit_watch'

module SpritWatch
  class CLI < Thor
    desc 'list', 'list stations'
    option :latitude, type: :numeric, required: true, desc: 'Latitude to search from'
    option :longitude, type: :numeric, required: true, desc: 'Longitude to search from'
    option :radius, type: :numeric, default: 2, desc: 'Search radius in km'
    option :closed, type: :boolean, default: false, desc: 'Include stations that are currently closed'
    option :format, type: :string, default: 'long', desc: "Format of the output; one of #{SpritWatch::Formatter.formats.join(', ')}"
    # option :fuel, type: :array, default: :all, desc: 'Fuel type (e5, e10, diesel, all). Multiple types can be given if separated by a space.'
    long_desc 'Lists all stations around the given point.'
    def list
      # warn "Stations within #{options[:radius]} km of #{options[:latitude]}, #{options[:longitude]}:"
      client(options).each do |station|
        puts SpritWatch::Formatter.formatter(options[:format]).format(station)
      end
    end

    private

    def client(options)
      SpritWatch::Client.new(ENV.fetch('TANKERKOENIG_API_KEY')).list(
        latitude: options[:latitude],
        longitude: options[:longitude],
        radius: options[:radius],
        closed: options[:closed]
      )
    end
  end
end

SpritWatch::CLI.start(ARGV)

# TODO: All prices
# "#{station}: #{station.price(options[:fuel].map(&:to_sym))}"
