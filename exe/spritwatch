#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift(File.expand_path('../lib', __dir__))

require 'pathname'
require 'thor'
require 'English'

require 'sprit_watch/formatter'
require 'sprit_watch/price_presenter'
require 'sprit_watch/client'
require 'sprit_watch/preferences'

module SpritWatch
  class CLI < Thor
    default_task :about

    desc 'about', 'Explain what this app is about'
    def about
      puts <<~ABOUT
        Fetches the current fuel prices from TankerkÃ¶nig.

      ABOUT
      help
    end

    desc 'list', 'List stations within the given coordinates'
    option :latitude, type: :numeric, required: true, desc: 'Latitude to search from'
    option :longitude, type: :numeric, required: true, desc: 'Longitude to search from'
    option :radius, type: :numeric, default: 2, desc: 'Search radius in km'
    option :closed, type: :boolean, default: false, desc: 'Include stations that are currently closed'
    option :format, type: :string, default: 'short', desc: "Format of the output; one of #{SpritWatch::Formatter.formats.join(', ')}"
    # TODO: option :fuel, type: :array, default: :all, desc: 'Fuel type (e5, e10, diesel, all). Multiple types can be given if separated by a space.'
    # TODO sort by price
    # TODO sort by distance
    long_desc 'List all stations within a radius of the given coordinates.'
    def list
      # warn "Stations within #{options[:radius]} km of #{options[:latitude]}, #{options[:longitude]}:"
      client.list(list_options(options)).each do |station|
        # TODO: print distance to point of origin
        puts SpritWatch::Formatter.formatter(options[:format]).format(station)
      end
    end

    desc 'prices', "List prices for the preferred stations (listed in #{Preferences::PREFERENCES_FILE}.)"
    # TODO: option :closed, type: :boolean, default: false, desc: 'Include stations that are currently closed'
    TYPES.each do |type|
      option type, type: :boolean, default: nil, desc: "Include #{type} prices"
    end
    # rubocop:disable Metrics/AbcSize
    def prices
      preferred_stations = StationRegistry.new(preferences.stations)
      selected_stations = client.prices(preferred_stations.all).reject(&:closed?)
      overridden_types = apply_overrides(preferences.types, options)
      PricePresenter.new(preferred_stations).find(overridden_types).present(selected_stations)
    rescue StandardError
      warn "Error: #{$ERROR_INFO.message}"
      exit 1
    end
    # rubocop:enable Metrics/AbcSize

    private

    def list_options(options)
      {
        latitude: options[:latitude],
        longitude: options[:longitude],
        radius: options[:radius],
        closed: options[:closed]
      }
    end

    def client
      SpritWatch::Client.new(ENV.fetch('TANKERKOENIG_API_KEY'))
    end

    def preferences
      @preferences ||= Preferences.new
    end

    # apply command-line overrides for all preferred types
    def apply_overrides(_preferred_types, options)
      (preferences.types || TYPES).tap do |pt|
        TYPES.each do |type|
          apply_override(pt, options[type], type)
        end
      end.uniq
    end

    # apply command-line override for a single type
    def apply_override(preferred_types, option, override_type)
      case option
      when nil
        preferred_types # no change
      when true
        preferred_types.prepend(override_type)
      when false
        preferred_types.delete(override_type)
      else
        raise "Unexpected option #{option}"
      end
    end
  end
end

SpritWatch::CLI.start(ARGV)
